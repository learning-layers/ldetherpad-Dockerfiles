var fs = require('fs');

var apiKey = fs.readFileSync('./APIKEY.txt', 'utf8');

exports.padUpdate = function(hook_name, context, cb) {
    var data = JSON.stringify({
        'authorId': context.author,
        'padId': context.pad.id,
        'apiKey': apiKey
    });

    var protocol = 'LDS_SERVER_PROTOCOL';
    var options = {
        host: 'LDS_SERVER_URL',
        port: 'LDS_SERVER_PORT',
        path: '/api/documentEtherpadInfo/etherpad/update',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Content-Length': data.length,
            'accept': '*/*'
        }
    };

    try {
        var req = null;
        if (protocol === "https") {
            if (options.host == "localhost") {
                process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
            }
            var https = require('https');
            req = https.request(options, function (res) {
                var msg = '';

                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    msg += chunk;
                });
                res.on('end', function () {
                    try {
                        console.log(JSON.parse(msg));
                    } catch (e) {
                        console.log(e);
                    }
                });
            });
        } else {
            var http = require('http');
            req = http.request(options, function (res) {
                var msg = '';

                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                    msg += chunk;
                });
                res.on('end', function () {
                    try {
                        console.log(JSON.parse(msg));
                    } catch (e) {
                        console.log(e);
                    }
                });
            });
        }
        req.on('error',function(err){ console.error(err)});
        req.on('timeout', function () {
            console.log('timeout');
            req.abort();
        });
        req.write(data);
        req.end();
    } catch (e) {
        console.log(e);
    }
    return cb();
};